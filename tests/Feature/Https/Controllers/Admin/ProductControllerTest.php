<?php

namespace Tests\Unit\Http\Controller\Admin;

use App\Http\Controllers\Admin\ProductController;
use App\Http\Requests\CreateProductRequest;
use App\Models\Product;
use App\Repositories\Interfaces\ProductRepositoryInterface;
use Illuminate\Http\Request;
use Tests\TestCase;
use Mockery as m;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ProductControllerTest extends TestCase
{
    /**
     * A basic unit test example.
     *
     * @return void
     */
    protected $productRepositoryMock;

    public function setUp(): void
    {
        $this->afterApplicationCreated(function () {
            $this->productRepositoryMock = m::mock($this->app->make(ProductRepositoryInterface::class));
        });
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_index_return_view()
    {
        $this->withoutMiddleware();
        $controller = new ProductController($this->productRepositoryMock);

        $products = factory(Product::class, 10)->make();

        $this->productRepositoryMock->shouldReceive('getProducts')
            ->once()
            ->andReturn($products);
        $request = new Request();
        $view = $controller->index($request);
        
        $this->assertArraySubset(['products' => $products], $view->getData());
        $this->assertEquals('admin.products.index', $view->getName());
    }

    public function test_create_return_view()
    {
        $this->withoutMiddleware();
        $controller = new ProductController($this->productRepositoryMock);

        $view = $controller->create();

        $this->assertEquals('admin.products.add', $view->getName());
    }

    public function test_create_request_product_rules()
    {
        $r = new CreateProductRequest();
        $this->assertEquals([
            'image' => 'mimes:jpg,jpeg,png',
            'discount' => 'required|numeric|min:0|max:100',
            'name' => 'required|min:6|max:50',
            'description' => 'required|min:6|max:255',
            'information' => 'required',
            'category_id' => 'required',
            'stock_amount' => 'required|numeric',
            'price' => 'required|numeric'
        ], $r->rules());
    }

    public function test_it_stores_new_product()
    {
        $this->withoutMiddleware();
        $data = [
            'name' => 'Ebook test',
            'description' => 'Ebook description',
            'information' => 'Ebook Information',
            'image' => '1.jpg',
            'stock_amount' => 10,
            'price' => 100000,
            'discount' => 10,
            'category_id' => 1,
        ];
        $product = $this->productRepositoryMock->create($data);

        $this->assertDatabaseHas('products', [
            'id' => $product->id,
            'name' => $product->name,
            'description' => $product->description,
            'information' => $product->information,
            'image' => $product->image,
            'stock_amount' => $product->stock_amount,
            'price' => $product->price,
            'discount' => $product->discount,
            'category_id' => $product->category_id,
        ]);
    }

    public function test_it_updates_product()
    {
        $this->withoutMiddleware();
        $product = factory(Product::class)->create();

        $nameChange = ['name' => 'New Book Name'];
        $result = $this->productRepositoryMock->update($product->id, $nameChange);

        $this->assertTrue(true, $result);
        $this->assertDatabaseHas('products', [
            'id' => $product->id,
            'name' => $nameChange['name'],
        ]);

        $informationChange = ['information' => 'New Information Book'];
        $result1 = $this->productRepositoryMock->update($product->id, $informationChange);

        $this->assertTrue(true, $result1);
        $this->assertDatabaseHas('products', [
            'id' => $product->id,
            'information' => $informationChange['information'],
        ]);
    }

    public function test_it_deletes_product()
    {
        $this->withoutMiddleware();
        $product = factory(Product::class)->create();
        $controller = new ProductController($this->productRepositoryMock);
        $result = $controller->destroy($product->id);
        $this->assertTrue(true, $result);
    }

}
