<?php

namespace Tests\Feature\Http\Controllers\Admin;

use App\Http\Controllers\Admin\OrderController;
use App\Models\Order;
use App\Repositories\Interfaces\OrderRepositoryInterface;
use Tests\TestCase;
use Mockery as m;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class OrderControllerTest extends TestCase
{
    /**
     * A basic feature test example.
     *
     * @return void
     */
    protected $orderRepositoryMock;

    public function setUp(): void
    {
        $this->afterApplicationCreated(function () {
            $this->orderRepositoryMock = m::mock($this->app->make(OrderRepositoryInterface::class));
        });
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_index_return_view()
    {
        $this->withoutMiddleware();
        $controller = new OrderController($this->orderRepositoryMock);
        $orders = factory(Order::class, 10)->make();

        $this->orderRepositoryMock->shouldReceive('getOrders')
            ->once()
            ->andReturn($orders);

        $view = $controller->index();

        $this->assertArraySubset(['orders' => $orders], $view->getData());
        $this->assertEquals('admin.orders.index', $view->getName());
    }

    public function test_edit_return_view()
    {
        $this->withoutMiddleware();
        $controller = new OrderController($this->orderRepositoryMock);
        $order = factory(Order::class)->make();
        $view = $controller->edit($order->id);

        $this->assertEquals('admin.orders.edit', $view->getName());
        $this->assertArrayHasKey('order', $view->getData());
    }

    public function test_it_updates_an_order()
    {
        $controler = new OrderController($this->orderRepositoryMock);
        $order = factory(Order::class)->create([
            'total_price' => 1000000,
            'user_id' => 1,
            'status' => 0,
        ]);
        $newOrder = [
            'total_price' => 120000,
            'user_id' => 1,
            'status' => 0,
        ];
        $result = $this->orderRepositoryMock->update($order->id, ['total_price' => $newOrder['total_price']]);

        $this->assertTrue($result, true);
        $this->assertDatabaseHas('orders', [
            'id' => $order->id,
            'total_price' => $newOrder['total_price'],
        ]);
    }

    public function test_it_deletes_an_order()
    {
        $this->withoutMiddleware();
        $order = factory(Order::class)->create([
            'total_price' => 1000000,
            'user_id' => 1,
            'status' => 0,
        ]);
        $controller = new OrderController($this->orderRepositoryMock);
        $result = $controller->destroy($order->id);

        $this->assertTrue(true, $result);
    }
}
